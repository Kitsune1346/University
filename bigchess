using  HorizonSideRobots
r=Robot(animate=true, "untitled.sit")

function bigchessmarker(r::Robot, N::Integer) 
    K1=N-1
    K2=N-1
    state=1
    num_West=num_side(r, West)
    num_Sud=num_side(r, Sud)
    side=Ost
    putmarker!(r)
    side=snake!(r, side, K1, K2, N)
    along!(r, West)
    along!(r, Sud)
    along_num!(r, Nord, num_Sud)
    along_num!(r, Ost, num_West)
end

function snake!(r::Robot, side::Horizonside, K1, K2, N)
    while isborder(r, Nord)==false
        K1, N, state=along(r, side, K1, N, state)
        state, K2=other(state, K2, N)
        K2=move_with_N(r, Nord, K2, state)
        K1=N-K1-1
        side=inverse(side)
    end
    along(r, side, K1, N, state)
end

function along(r::Robot, side::Horizonside, K, N)
    while isborder(r, side)==false
            state, K=other(state, K, N)
            K=move_with_N(r, side, K, state)
    end
    return K, N, state
end

function move_with_N(r::Robot, side::HorizonSide, N::Integer, state)
    if state==1
        move!(r, side)
        putmarker!(r)
    else
        move!(r, side)
    end
    N-=1
    return N
end

function along_num!(r::Robot, side, num)
    while num!=0
        move!(r::Robot, side)
        num-=1
    end
end

function num_side(r::Robot, side)
    num_sides=0
    while isborder(r, side)==false
        move!(r, side)
        num_sides+=1
    end
    return num_sides
end

function along!(r, side) 
    while isborder(r, side)==false
        move!(r, side)
    end
end

inverse(side::HorizonSide)=HorizonSide(mod(Int(side)+2,  4))

function other(state, K, N)
    if K==0
        state=(mod((state+1), 2))
        K=N
    end
    return state, K
end
